import logging
import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üìå –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
LOG_DIR = "logs"
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)


# üìå –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logger(agent_name):
    logger = logging.getLogger(agent_name)
    logger.setLevel(logging.INFO)

    log_file = os.path.join(LOG_DIR, f"{agent_name}.log")
    handler = logging.FileHandler(log_file)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)

    if not logger.handlers:
        logger.addHandler(handler)

    return logger


# üü¢ –ê–≥–µ–Ω—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def communication_agent(user_id, query):
    logger = setup_logger("CommunicationAgent")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ API-–∫–ª—é—á
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        logger.error("API-–∫–ª—é—á –¥–ª—è OpenRouter.ai –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return "–û—à–∏–±–∫–∞: API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."

    # –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–∂–¥—ã–π LLM-–∞–≥–µ–Ω—Ç
    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç—ã LLM...")
    perplexity_response = perplexity_agent(query)
    qwen_response = qwen_agent(query)
    deepseek_response = deepseek_agent(query)
    openai_response = openai_agent(query)

    llm_responses = {
        "Perplexity": perplexity_response,
        "Qwen": qwen_response,
        "DeepSeek": deepseek_response,
        "OpenAI GPT-4": openai_response
    }

    logger.info(f"–û—Ç–≤–µ—Ç—ã –æ—Ç LLM: {llm_responses}")

    # –ü–µ—Ä–µ–¥–∞—ë–º –æ—Ç–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç—É-—Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä—É
    summary = summarization_agent(llm_responses)
    logger.info(f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {summary}")

    return summary


# üîµ –ê–≥–µ–Ω—Ç –¥–ª—è Perplexity
def perplexity_agent(query):
    logger = setup_logger("PerplexityAgent")
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ Perplexity...")
    return request_openrouter(query, "perplexity/sonar-reasoning", logger)


# üîµ –ê–≥–µ–Ω—Ç –¥–ª—è Qwen
def qwen_agent(query):
    logger = setup_logger("QwenAgent")
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ Qwen...")
    return request_openrouter(query, "qwen/qwen-vl-plus:free", logger)


# üîµ –ê–≥–µ–Ω—Ç –¥–ª—è DeepSeek
def deepseek_agent(query):
    logger = setup_logger("DeepSeekAgent")
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ DeepSeek...")
    return request_openrouter(query, "deepseek/deepseek-r1-distill-llama-70b:free", logger)


# üîµ –ê–≥–µ–Ω—Ç –¥–ª—è OpenAI GPT-4
def openai_agent(query):
    logger = setup_logger("OpenAIAgent")
    logger.info("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ OpenAI GPT-4...")
    return request_openrouter(query, "openai/gpt-4-turbo", logger)


# üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ OpenRouter.ai
def request_openrouter(query, model_name, logger):
    api_key = os.getenv("OPENROUTER_API_KEY")
    api_url = "https://openrouter.ai/api/v1/chat/completions"

    payload = {
        "model": model_name,
        "messages": [{"role": "user", "content": query}]
    }
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}

    try:
        response = requests.post(api_url, headers=headers, json=payload, timeout=10)
        response_json = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        if "error" in response_json:
            logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {response_json['error']}")
            return "–û—à–∏–±–∫–∞ API"

        response_text = response_json.get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç {model_name}: {response_text}")
        return response_text

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model_name}: {str(e)}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"


# üü† –ê–≥–µ–Ω—Ç-—Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä: –¥–µ–ª–∞–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤
def summarization_agent(llm_responses):
    logger = setup_logger("SummarizationAgent")
    logger.info("–ó–∞–ø—É—Å–∫ —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞...")

    combined_text = "\n".join([f"{model}: {response}" for model, response in llm_responses.items()])

    return request_openrouter(f"–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ: {combined_text}", "openai/gpt-4-turbo", logger)


# ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
if __name__ == "__main__":
    user_id = "12345"
    query = "–ö–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–∑–º–µ–Ω–∏—Ç –º–∏—Ä –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –ª–µ—Ç?"
    result = communication_agent(user_id, query)
    print("\n--- –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ---")
    print(result)